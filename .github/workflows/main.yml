name: CI - plumed tutorials -

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: calculate cache key for the compilation
        id: get-key
        run: |
          git clone --bare https://github.com/plumed/plumed2.git
          stable=$(cd plumed2.git ; git branch --list 'v2.*' --sort='version:refname'| sed "s/^ *//" | grep '^v2\.[0-9]*$' | tail -n 1)
          echo "key=$(cd plumed2.git ; git rev-parse "$stable")-$(cd plumed2.git ; git rev-parse master)" >> $GITHUB_OUTPUT

      - name: setting up or retrieving the compilation cache
        uses: actions/cache@v4
        with:
          path: |
            ~/opt
            ~/.ccache
          key: ccache-${{ runner.os }}-${{ steps.get-key.outputs.key }}
          restore-keys: ccache-${{ runner.os }}-

      - name: Set paths
        run: |
              echo "$HOME/opt/bin" >> $GITHUB_PATH
              echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
              echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
              echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
              echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
              echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
              # needed to avoid MPI warning
              echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV
      - name: Install software
        run: |
            sudo apt update
            sudo apt install mpi-default-bin mpi-default-dev
            sudo apt install libfftw3-dev gsl-bin libgsl0-dev libboost-serialization-dev
            sudo apt install ccache
            sudo apt-get update
            sudo ln -s ccache /usr/local/bin/mpic++
            export PATH=/usr/lib/ccache:${PATH}
            ccache -s
            .ci/install.libtorch
            # version=master or version=f123f12f3 to select a specific version
            # The ordering is by version, so 2.10 will be > than 2.1 
            CXX="mpic++" .ci/install.plumed version="$(cd plumed2.git ; git branch --list 'v2.*' --sort='version:refname'| sed "s/^ *//" | grep '^v2\.[0-9]*$' | tail -n 1)" repo=$PWD/plumed2.git
            # GB: in addition, we install master version as plumed_master
            CXX="mpic++" .ci/install.plumed version=master suffix=_master repo=$PWD/plumed2.git
            ccache -s
      - name: caches the install results
        uses: actions/cache/save@v4
        with:
          path: |
            ~/opt
            ./_data
          key: build-${{ runner.os }}-${{ github.sha }}

  build:
    needs: setup
    strategy:
      matrix:
        replica: [0, 1]
        # I'd wish to use something like ${{ strategy.job-total }} the get the 
        #number of current jobs of the matrix, but things could go wrong in case
        #of adding a "special" strategy or something similar.
        # with env: REPLICAS there are 2 things to change (replica and REPLICAS),
        #but at a least no need to update a line that can be lost further in the yaml
    env:
      REPLICAS: 2
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4

    - uses: actions/cache/restore@v4
      with:
        path: |
          ~/opt
          ./_data
        key: build-${{ runner.os }}-${{ github.sha }}
        fail-on-cache-miss: true

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
        cache: pip

    - name: Set paths
      run: |
        echo "$HOME/opt/bin" >> $GITHUB_PATH
        echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
        echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
        # needed to avoid MPI warning
        echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV

    - name: Install software
      run: |
        sudo apt update
        #shall we get non-dev version of these?
        sudo apt install mpi-default-bin mpi-default-dev
        sudo apt install libfftw3-dev gsl-bin libgsl0-dev libboost-serialization-dev
        sudo apt-get update
        pip install -r requirements.txt
    - name: Build manual
      run: | 
        python --version
        # N.B. If you adjust the number of replicas used here you need to adjust the liquid syntax in summary.md that builds the total number of lessons that use each action 
        python build_manual.py --nreplicas $REPLICAS --replica ${{matrix.replica}}
    - name: Compile lessons
      run: |
        python --version
        # N.B. If you adjust the number of replicas used here you need to adjust the liquid syntax in summary.md that builds the total number of lessons that use each action 
        python compile.py --nreplicas $REPLICAS --replica ${{matrix.replica}}
        cp $(plumed info --root)/json/syntax.json syntax.${{matrix.replica}}.json
    - name: Create tar ball
      run: |
        tar cf lessons.tar $(find . -name "*.pdf") $(find . -name "*.png") $(find . -name "*.gif") $(find . -name "*.md") $(find . -name "*.stdout.txt.zip") $(find . -name "*.stderr.txt.zip") $(find . -name ".svg") $(find . -name "*.html") _data/*.yml _data/*.json

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lesson-content${{matrix.replica}}
        path: lessons.tar 
        retention-days: 1

  # This is the job that uploads the website
  upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
        cache: 'pip'

    - name: Install software
      run: |
        grep 'PyYAML\|pytz\|networkx' requirements.txt > requirements-upload.txt
        pip install -r requirements-upload.txt
        
    - name: Create graph
      run: |
        python create_graph.py
    - name: Upload
      env:
        PLUMED_SCHOOL_GITHUB_TOKEN: ${{ secrets.PLUMED_SCHOOL_GITHUB_TOKEN }}
      run: |
        bash .ci/push _config.yml actioncount.md _layouts _data assets teacher.png nest.png pigeon.png pigeon-MC.png
